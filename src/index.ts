import { app, BrowserWindow, ipcMain, net, protocol } from "electron";
import path from "node:path";
import url from "node:url";
import { listPhotosByApp, findDevice, listDevice, importPhotos, testStdin, testStdin2, waitForDevice, stopProcess, monitorMobileConnection } from "./api";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const composeReply = (data: any) => ({ status: "success", data: data });  // is it needed? : jlim
const composeError = (e:any) => {
  if (!(e instanceof Error)) {
    e = new Error("Error");
    console.log("No Error Type", e)
  } else{
    console.log("errlr will be", { name: e.name, message: e.message })
  }
  return ({
  status: "error",
  error: { name: e.name, message: e.message }
})};

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 1200,
    width: 1600,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
    }
  });

  ipcMain.on("synchronous-message", (event, arg) => {
    console.log(arg); // prints "ping"
    event.returnValue = "pong";
  });

  ipcMain.handle("invoke-handle-message", (event, arg) => {
    console.log(arg);
    return "pong";
  });

  ipcMain.on("find-device", async (event, ...args) => {
    console.log("main -- find-device", args);
    const deviceType = args ? args[0] : "MOBILE";
    try {
      const result = await findDevice(deviceType, 120);
      event.sender.send("find-device-reply", composeReply(result));
    } catch (e) {
      event.sender.send("find-device-reply", composeError(e));
    }
  });

  ipcMain.on("list-devices", async (event, ...args) => {
    console.log("main -- list-devices", args);
    const deviceType = args ? args[0] : "MOBILE";
    try {
      const result = await listDevice();
      event.sender.send("list-devices-reply", composeReply(result));
    } catch (e) {
      console.log("would be a problem")
      event.sender.send("list-devices-reply", composeError(e));
    }
  });

  ipcMain.handle("wait-device-list", async (event, ...args) => {
    const deviceType = args ? args[0] : "MOBILE";
    try {
      const result = await waitForDevice(args[0], args[1], args[2]);
      event.sender.send("wait-device-list-reply", composeReply(result));
      return composeReply(result);
    } catch (e) {
      console.log("would be a problem")
      event.sender.send("wait-device-list-reply", composeError(e));
      return composeError(e);
    }
  });

  ipcMain.on("stop-process", async (event, ...args) => {
    console.log("main -- stop-proces", args);
    stopProcess(args[0]);
  });

  ipcMain.handle('monitor-mobile-connection', async (event, ...args) => {
    console.log("main -- monitor-mobile-connection", args);
    try {
      if(!args[0]) throw Error("No RequestId")
      const result = await monitorMobileConnection(args[0], args[1]);
      event.sender.send("'monitor-mobile-connection-reply", composeReply(result));
      return composeReply(result);
    } catch (e) {
      console.log("would be a problem")
      event.sender.send("'monitor-mobile-connection-reply", composeError(e));
      return composeError(e);
    }
  });

  ipcMain.on("list-photos", async (event, ...args) => {
    console.log("main -- request - list", args);
    function sendNoti(msg: string) {
      console.log("send mssage:list-photos", msg)
      event.sender.send("general-msg", msg);
    }
    try {
      const result = await listPhotosByApp(
        args ? args[0] : "",
        args ? args[1] : "",
        args ? args[2] : "c:\\path\\to\\thumbnails",
        sendNoti
      );
      event.sender.send("list-photos-reply", composeReply(result));
      event.sender.send("general-msg", "msg:FOUND list.json");
    } catch (e) {
      console.log("[list-photo reported error]", e);
      event.sender.send("list-photos-reply", composeError(e));
    }
  });

  ipcMain.on("import-photos", async (event, ...args) => {
    console.log("main -- import-photos", args);
    try {
      if (args && args[0] && args[1] && args[0]) {
        const result = await importPhotos(args[0], args[1], args[2]);
        event.sender.send("import-photos-reply", composeReply(result));
        event.sender.send("general-msg", "~Copy completed");
      }
      else throw new Error("Arument Error");
    } catch (e) {
      event.sender.send("import-photos-reply", composeError(e));
    }
  });

  ipcMain.handle("test-stdin2", async (event, ...args) => {
    const result = await testStdin2(args[0], args[1]);
    event.sender.send("asynchronous-reply", result);
    return result;
  });

  ipcMain.on("test-stdin", event => {
    testStdin();
    event.reply("asynchronous-reply", "pong");
  });

  ipcMain.on("get-electron-info", event => {
    event.reply("asynchronous-reply", "pong");
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  mainWindow.setAlwaysOnTop(true, 'normal')

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
//app.on('ready', createWindow);

app.whenReady().then(() => {
  protocol.handle("atom", request => {
    const filePath = request.url.slice("atom://".length);
    const fileUrl = url.pathToFileURL(
      path.join("C:\\path\\to\\thumbnails", decodeURI(filePath))
    );
    return net.fetch(fileUrl.toString());
  });
  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
